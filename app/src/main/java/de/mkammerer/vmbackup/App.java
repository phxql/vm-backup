/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.mkammerer.vmbackup;

import de.mkammerer.vmbackup.copy.Copier;
import de.mkammerer.vmbackup.hash.Hasher;
import de.mkammerer.vmbackup.progress.ProgressReporter;
import de.mkammerer.vmbackup.progress.SmartProgressReporter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.nio.file.Files;
import java.nio.file.Path;

public class App {
    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {
        LOGGER.info("Starting");
        try {
            new App().run(args);
            LOGGER.info("Stopped");
        } catch (Exception e) {
            LOGGER.error("Boom goes the program", e);
            System.exit(1);
        }
    }

    private void run(String[] args) throws Exception {
        if (!checkArgs(args)) {
            return;
        }
        Path source = Path.of(args[0]).toAbsolutePath();
        Path target = Path.of(args[1]).toAbsolutePath();
        Path targetIndex = getTargetIndexFile(target).toAbsolutePath();

        LOGGER.info("Source file: {}", source);
        LOGGER.info("Target file: {}", target);
        LOGGER.info("Target index file: {}", targetIndex);

        if (!Files.exists(source)) {
            LOGGER.error("Source file not found: {}", source);
            return;
        }
        if (!Files.isReadable(source)) {
            LOGGER.error("Source file exists, but unable to read: {}", source);
            return;
        }

        ProgressReporter progressReporter = new SmartProgressReporter();

        Copier copier = new Copier(new Hasher());
        copier.copy(source, target, targetIndex, progressReporter);
    }

    private Path getTargetIndexFile(Path target) {
        return target.resolveSibling(target.getFileName() + ".vm-backup-index");
    }

    private boolean checkArgs(String[] args) {
        if (args.length != 2) {
            LOGGER.info("Usage: vm-backup SOURCE TARGET");
            return false;
        }
        return true;
    }
}
